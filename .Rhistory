library(shinyFeedback)
library(plotly)
ui <- fluidPage(
# useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(hom_victims_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
# graph <- reactive({  # ASK ALSO ABOUT THIS: TWO REACTIVES INSIDE?
#  valid_year <- input$n >= 2019 & input$n <= 2023
# feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
#req(valid_year)
#  homicides_updated <- reactive({
#   homicides_community_app %>%
#    filter(YEAR == input$n)
# })
#  })
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_community_q3,
aes(fill = homicides, geometry = geometry)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of Victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
# output$ss <- renderPlotly({
#  ggplotly(ggplot() +
#            geom_sf(data = ssalerts_updated(),
#                   aes(fill = alerts, geometry = geometry)) +
#          scale_fill_gradient(low = "white", high = input$color) +
#         labs(title = "Number of shotspotter alerts in each community area",
#             fill = element_blank(),
#            caption = "Source: City of Chicago") +
#      theme_void())
})
# Packages
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(shiny)
library(shinyFeedback)
library(plotly)
ui <- fluidPage(
# useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(hom_victims_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
# graph <- reactive({  # ASK ALSO ABOUT THIS: TWO REACTIVES INSIDE?
#  valid_year <- input$n >= 2019 & input$n <= 2023
# feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
#req(valid_year)
#  homicides_updated <- reactive({
#   homicides_community_app %>%
#    filter(YEAR == input$n)
# })
#  })
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_community_q3,
aes(fill = homicides, geometry = geometry)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of Victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
# output$ss <- renderPlotly({
#  ggplotly(ggplot() +
#            geom_sf(data = ssalerts_updated(),
#                   aes(fill = alerts, geometry = geometry)) +
#          scale_fill_gradient(low = "white", high = input$color) +
#         labs(title = "Number of shotspotter alerts in each community area",
#             fill = element_blank(),
#            caption = "Source: City of Chicago") +
#      theme_void())
#})
}
shinyApp(ui = ui, server = server)
# Homicide dataset
hom_victims_grpd_q3 <- homicide_victims %>%
filter(YEAR == c(2019,2020,2021,2022,2023)) %>%
group_by(YEAR, COMMUNITY_AREA) %>%
summarize(homicides = n())
fname3 <- paste0(path, "homicides_community_q3.csv")
write.csv(homicides_community_q3, file = fname3)
# Homicide dataset
hom_victims_grpd_q3 <- homicide_victims %>%
filter(YEAR == c(2019,2020,2021,2022,2023)) %>%
group_by(YEAR, COMMUNITY_AREA) %>%
summarize(homicides = n())
fname3 <- paste0(path, "homicides_community_q3.csv")
write.csv(homicides_community_q3, file = fname3)
homicides_victims_grpd_q3 <- homicide_victims %>%
filter(YEAR == c(2019,2020,2021,2022,2023)) %>%
group_by(YEAR, COMMUNITY_AREA) %>%
summarize(homicides = n())
fname3 <- paste0(path, "homicides_community_q3.csv")
write.csv(homicides_community_q3, file = fname3)
homicides_community_q3 <- homicide_victims %>%
filter(YEAR == c(2019,2020,2021,2022,2023)) %>%
group_by(YEAR, COMMUNITY_AREA) %>%
summarize(homicides = n())
fname3 <- paste0(path, "homicides_community_q3.csv")
write.csv(homicides_community_q3, file = fname3)
# Packages
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(shiny)
library(shinyFeedback)
library(plotly)
ui <- fluidPage(
# useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(homicides_community_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
# graph <- reactive({  # ASK ALSO ABOUT THIS: TWO REACTIVES INSIDE?
#  valid_year <- input$n >= 2019 & input$n <= 2023
# feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
#req(valid_year)
#  homicides_updated <- reactive({
#   homicides_community_app %>%
#    filter(YEAR == input$n)
# })
#  })
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_community_q3,
aes(fill = homicides, geometry = geometry)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of Victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
# output$ss <- renderPlotly({
#  ggplotly(ggplot() +
#            geom_sf(data = ssalerts_updated(),
#                   aes(fill = alerts, geometry = geometry)) +
#          scale_fill_gradient(low = "white", high = input$color) +
#         labs(title = "Number of shotspotter alerts in each community area",
#             fill = element_blank(),
#            caption = "Source: City of Chicago") +
#      theme_void())
#})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(homicides_community_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
# graph <- reactive({
#  valid_year <- input$n >= 2019 & input$n <= 2023
# feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
#req(valid_year)
#  homicides_updated <- reactive({
#   homicides_community_app %>%
#    filter(YEAR == input$n)
# })
#  })
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_community_q3,
aes(fill = homicides)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of Victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
# output$ss <- renderPlotly({
#  ggplotly(ggplot() +
#            geom_sf(data = ssalerts_updated(),
#                   aes(fill = alerts, geometry = geometry)) +
#          scale_fill_gradient(low = "white", high = input$color) +
#         labs(title = "Number of shotspotter alerts in each community area",
#             fill = element_blank(),
#            caption = "Source: City of Chicago") +
#      theme_void())
#})
}
shinyApp(ui = ui, server = server)
# Packages
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(shiny)
library(shinyFeedback)
library(plotly)
ui <- fluidPage(
# useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(homicides_community_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
# graph <- reactive({
#  valid_year <- input$n >= 2019 & input$n <= 2023
# feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
#req(valid_year)
#  homicides_updated <- reactive({
#   homicides_community_app %>%
#    filter(YEAR == input$n)
# })
#  })
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_community_app,
aes(fill = homicides, geometry = geometry)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of Victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
# output$ss <- renderPlotly({
#  ggplotly(ggplot() +
#            geom_sf(data = ssalerts_updated(),
#                   aes(fill = alerts, geometry = geometry)) +
#          scale_fill_gradient(low = "white", high = input$color) +
#         labs(title = "Number of shotspotter alerts in each community area",
#             fill = element_blank(),
#            caption = "Source: City of Chicago") +
#      theme_void())
#})
}
shinyApp(ui = ui, server = server)
# Packages
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(shiny)
library(shinyFeedback)
library(plotly)
ui <- fluidPage(
# useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(homicides_community_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
homicides_updated <- reactive({
valid_year <- input$n >= 2019 & input$n <= 2023
feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
req(valid_year)
homicides_community_app %>%
filter(YEAR == input$n)
})
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_updated(),
aes(fill = homicides, geometry = geometry)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
# output$ss <- renderPlotly({
#  ggplotly(ggplot() +
#            geom_sf(data = ssalerts_updated(),
#                   aes(fill = alerts, geometry = geometry)) +
#          scale_fill_gradient(low = "white", high = input$color) +
#         labs(title = "Number of shotspotter alerts in each community area",
#             fill = element_blank(),
#            caption = "Source: City of Chicago") +
#      theme_void())
#})
}
shinyApp(ui = ui, server = server)
# Packages
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(shiny)
library(shinyFeedback)
library(plotly)
ui <- fluidPage(
useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(homicides_community_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
homicides_updated <- reactive({
valid_year <- input$n >= 2019 & input$n <= 2023
feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
req(valid_year)
homicides_community_app %>%
filter(YEAR == input$n)
})
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_updated(),
aes(fill = homicides, geometry = geometry)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
# output$ss <- renderPlotly({
#  ggplotly(ggplot() +
#            geom_sf(data = ssalerts_updated(),
#                   aes(fill = alerts, geometry = geometry)) +
#          scale_fill_gradient(low = "white", high = input$color) +
#         labs(title = "Number of shotspotter alerts in each community area",
#             fill = element_blank(),
#            caption = "Source: City of Chicago") +
#      theme_void())
#})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(homicides_community_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
homicides_updated <- reactive({
valid_year <- input$n >= 2019 & input$n <= 2023
feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
req(valid_year)
homicides_community_app %>%
filter(YEAR == input$n)
})
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_updated(),
aes(fill = homicides, geometry = geometry)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
}
shinyApp(ui = ui, server = server)
# Packages
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(shiny)
library(shinyFeedback)
library(plotly)
ui <- fluidPage(
useShinyFeedback(),
titlePanel("City of Chicago: Public Safety"),
numericInput(inputId = "n",
label= "Choose a year between 2019 and 2023",
value = 2019),
selectInput(inputId = "color",
label = "Choose a color",
choices = c("darkblue", "darkgreen", "darkred", "black"),
selected = "darkred"),
plotlyOutput("hv")
)
server <- function(input, output) {
path  <- "C:/Users/Julene/Documents/GitHub/DAP2R-pset2/"
homicides_community_q3 <- read.csv(paste0(path, "homicides_community_q3.csv"))
chi_communities <- st_read(file.path(path, "/geo_export_a7c0c31a-6b8e-4c3f-8f41-d685a35da7a1.shp"))
homicides_community_app <- inner_join(homicides_community_q3, chi_communities,
by = c("COMMUNITY_AREA" = "community"))
homicides_updated <- reactive({
valid_year <- input$n >= 2019 & input$n <= 2023
feedbackWarning("n", !valid_year, "Please choose a year between 2019 and 2023!")
req(valid_year)
homicides_community_app %>%
filter(YEAR == input$n)
})
output$hv <- renderPlotly({
ggplotly(ggplot() +
geom_sf(data = homicides_updated(),
aes(fill = homicides, geometry = geometry)) +
scale_fill_gradient(low = "white", high = input$color) +
labs(title = "Number of victims of homicides and non-fatal shootings
in each community area",
fill = element_blank(),
caption = "Source: City of Chicago") +
theme_void())
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='julenelandaburu',
token='ECBD85652DBD3495CAD61EF93A5CB89B',
secret='8pycps7ZRriC94YP8yleK2ExP7/KpqnzEoM3u9iH')
rsconnect::setAccountInfo(name="julenelandaburu",
token="ECBD85652DBD3495CAD61EF93A5CB89B",
secret="8pycps7ZRriC94YP8yleK2ExP7/KpqnzEoM3u9iH")
library(rsconnect)
deployApp()
